DataStructure,Operation,Description,Speed (Time Complexity)
ArrayList,Append,Add an element at the end of the list,O(1)
ArrayList,Remove (from end),Remove the last element from the list,O(1)
ArrayList,Insert (at beginning),Insert an element at the beginning of the list,O(n)
ArrayList,Insert (at middle),Insert an element in the middle of the list,O(n)
ArrayList,Insert (at end),Insert an element at the end of the list,O(1)
ArrayList,Access by index (random access),Access an element by its index,O(1)
ArrayList,Search (linear search),Search for an element using linear search,O(n)
ArrayList,Search (binary search),Only possible if list is sorted,O(log n)
Array,Access by index (random access),Access an element by its index,O(1)
Array,Search (linear search),Search for an element using linear search,O(n)
Array,Search (binary search),Sorted array,O(log n)
HashMap,Insert (key-value pair),Insert a key-value pair into the map,O(1)
HashMap,Delete (key-value pair),Delete a key-value pair from the map,O(1)
HashMap,Access by key (random access),Access a value by its key,O(1)
HashMap,Search (by key),Search for a key in the map,O(1)
Stack,Push,Push an element onto the top of the stack,O(1)
Stack,Pop,Remove and return the top element from the stack,O(1)
Stack,Peek (top element),Return the top element of the stack without removing it,O(1)
Queue,Enqueue,Add an element to the rear of the queue,O(1)
Queue,Dequeue,Remove and return the front element from the queue,O(1)
Queue,Peek (front element),Return the front element of the queue without removing it,O(1)
LinkedList,Append (at end),Add an element at the end of the linked list,O(1)
LinkedList,Insert (at beginning),Insert an element at the beginning of the linked list,O(1)
LinkedList,Insert (at middle),Insert an element in the middle of the linked list,O(n)
LinkedList,Delete (at beginning),Delete the first element from the linked list,O(1)
LinkedList,Delete (at middle),Delete an element from the middle of the linked list,O(n)
LinkedList,Access by index (sequential access),Access an element by its index,O(n)
LinkedList,Search (sequential search),Search for an element using sequential search,O(n)
DoublyLinkedList,Append (at end),Add an element at the end of the doubly linked list,O(1)
DoublyLinkedList,Insert (at beginning),Insert an element at the beginning of the doubly linked list,O(1)
DoublyLinkedList,Insert (at middle),Insert an element in the middle of the doubly linked list,O(n)
DoublyLinkedList,Delete (at beginning),Delete the first element from the doubly linked list,O(1)
DoublyLinkedList,Delete (at middle),Delete an element from the middle of the doubly linked list,O(n)
DoublyLinkedList,Access by index (sequential access),Access an element by its index,O(n)
DoublyLinkedList,Search (sequential search),Search for an element using sequential search,O(n)
Heap,Insert,Add an element to the heap and maintain the heap property,O(log n)
Heap,Delete (root),Remove the root element from the heap and maintain the heap property,O(log n)
Heap,Access (root),Return the root element of the heap without removing it,O(1)
Heap,Extract (root),Remove and return the root element of the heap,O(log n)
Heap,Heapify,Reorganize the elements of an array into a heap,O(n)
AVL Tree,Insert,Insert a new node into the AVL tree and maintain balance,O(log n)
AVL Tree,Delete,Delete a node from the AVL tree and maintain balance,O(log n)
AVL Tree,Search,Search for a node in the AVL tree,O(log n)
